
BachelorProef.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002659  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023d2  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000501c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001151  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000073  00000000  00000000  00006201  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00006274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
int main(void)
{
	#ifdef Slave
	uartsetup();
	#endif
	readRegister_usart0();
  b8:	0e 94 82 00 	call	0x104	; 0x104 <readRegister_usart0>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x4>

000000be <sendACK_usart0>:
        return 1;
    }
}

int sendACK_usart0(){
	if(USART0_STATUS&(1<<5)){  // get de DREIF bit
  be:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
  c2:	85 ff       	sbrs	r24, 5
  c4:	0a c0       	rjmp	.+20     	; 0xda <sendACK_usart0+0x1c>
		USART0_TXDATAH &= ~(1<<0);	// zet bit op 0
  c6:	e3 e0       	ldi	r30, 0x03	; 3
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	80 83       	st	Z, r24
		USART0_TXDATAL = 0x00;
  d0:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		return 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret
	}
	else {
		return 1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
  de:	08 95       	ret

000000e0 <sendNACK_usart0>:

int sendNACK_usart0(){
	if(USART0_STATUS&(1<<5)){  // get de DREIF bit
  e0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
  e4:	85 ff       	sbrs	r24, 5
  e6:	0b c0       	rjmp	.+22     	; 0xfe <sendNACK_usart0+0x1e>
		USART0_TXDATAH |= (1<<0);	// zet bit op 1
  e8:	e3 e0       	ldi	r30, 0x03	; 3
  ea:	f8 e0       	ldi	r31, 0x08	; 8
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
		USART0_TXDATAL = 0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		return 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
	}
	else {
		return 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 102:	08 95       	ret

00000104 <readRegister_usart0>:
    - eerste RXDATAH inlezen en kijken of er nieuwe data aanwezig is 
    - checken of de data goed is toegekomen met PERR/FERR
    - als alles correct is -> RXDATAL inlezen en register laten schiften
*/

int readRegister_usart0(){      // geeft 8 bits terug + 1 bit als packetnummer 
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	int bits[2];
	if(USART0_RXDATAH&(1<<7)){	// kijken naar 7de bit
 108:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f4801>
 10c:	88 23       	and	r24, r24
 10e:	8c f4       	brge	.+34     	; 0x132 <readRegister_usart0+0x2e>
		bits[0] = USART0_RXDATAH;
 110:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f4801>
		bits[1] = USART0_RXDATAL; 
 114:	c0 91 00 08 	lds	r28, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
 118:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(bits[0]&(1<<2) || bits[0]&(1<<1)){	// kijken of er geen frame of parity errors zijn
 11a:	82 fd       	sbrc	r24, 2
 11c:	02 c0       	rjmp	.+4      	; 0x122 <readRegister_usart0+0x1e>
 11e:	81 ff       	sbrs	r24, 1
 120:	05 c0       	rjmp	.+10     	; 0x12c <readRegister_usart0+0x28>
			sendNACK_usart0();			// 0xAA voorlopig als NACK
 122:	0e 94 70 00 	call	0xe0	; 0xe0 <sendNACK_usart0>
			return 1;
 126:	c1 e0       	ldi	r28, 0x01	; 1
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <readRegister_usart0+0x32>
		}else{//else if checken op NACK moet nog worden toegevoegd -> vraag hoe gaan we dit naar buiten brengen via de int?
			sendACK_usart0();
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <sendACK_usart0>
			return bits[1];
 130:	02 c0       	rjmp	.+4      	; 0x136 <readRegister_usart0+0x32>
		}	
	}
	else{
		return 1;	// nog geen data beschikbaar
 132:	c1 e0       	ldi	r28, 0x01	; 1
 134:	d0 e0       	ldi	r29, 0x00	; 0
	}
}
 136:	ce 01       	movw	r24, r28
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
