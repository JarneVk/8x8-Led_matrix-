
BachelorProef.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000266f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023d2  00000000  00000000  000028ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038e  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00005060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001160  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000073  00000000  00000000  00006254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000062c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	55 c0       	rjmp	.+170    	; 0xb0 <__bad_interrupt>
   6:	00 00       	nop
   8:	53 c0       	rjmp	.+166    	; 0xb0 <__bad_interrupt>
   a:	00 00       	nop
   c:	51 c0       	rjmp	.+162    	; 0xb0 <__bad_interrupt>
   e:	00 00       	nop
  10:	4f c0       	rjmp	.+158    	; 0xb0 <__bad_interrupt>
  12:	00 00       	nop
  14:	4d c0       	rjmp	.+154    	; 0xb0 <__bad_interrupt>
  16:	00 00       	nop
  18:	4b c0       	rjmp	.+150    	; 0xb0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	49 c0       	rjmp	.+146    	; 0xb0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	47 c0       	rjmp	.+142    	; 0xb0 <__bad_interrupt>
  22:	00 00       	nop
  24:	45 c0       	rjmp	.+138    	; 0xb0 <__bad_interrupt>
  26:	00 00       	nop
  28:	43 c0       	rjmp	.+134    	; 0xb0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	41 c0       	rjmp	.+130    	; 0xb0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3f c0       	rjmp	.+126    	; 0xb0 <__bad_interrupt>
  32:	00 00       	nop
  34:	3d c0       	rjmp	.+122    	; 0xb0 <__bad_interrupt>
  36:	00 00       	nop
  38:	3b c0       	rjmp	.+118    	; 0xb0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	39 c0       	rjmp	.+114    	; 0xb0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	37 c0       	rjmp	.+110    	; 0xb0 <__bad_interrupt>
  42:	00 00       	nop
  44:	35 c0       	rjmp	.+106    	; 0xb0 <__bad_interrupt>
  46:	00 00       	nop
  48:	33 c0       	rjmp	.+102    	; 0xb0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	31 c0       	rjmp	.+98     	; 0xb0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2f c0       	rjmp	.+94     	; 0xb0 <__bad_interrupt>
  52:	00 00       	nop
  54:	2d c0       	rjmp	.+90     	; 0xb0 <__bad_interrupt>
  56:	00 00       	nop
  58:	2b c0       	rjmp	.+86     	; 0xb0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	29 c0       	rjmp	.+82     	; 0xb0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	27 c0       	rjmp	.+78     	; 0xb0 <__bad_interrupt>
  62:	00 00       	nop
  64:	25 c0       	rjmp	.+74     	; 0xb0 <__bad_interrupt>
  66:	00 00       	nop
  68:	23 c0       	rjmp	.+70     	; 0xb0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	21 c0       	rjmp	.+66     	; 0xb0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1f c0       	rjmp	.+62     	; 0xb0 <__bad_interrupt>
  72:	00 00       	nop
  74:	1d c0       	rjmp	.+58     	; 0xb0 <__bad_interrupt>
  76:	00 00       	nop
  78:	1b c0       	rjmp	.+54     	; 0xb0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	19 c0       	rjmp	.+50     	; 0xb0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__bad_interrupt>
  82:	00 00       	nop
  84:	15 c0       	rjmp	.+42     	; 0xb0 <__bad_interrupt>
  86:	00 00       	nop
  88:	13 c0       	rjmp	.+38     	; 0xb0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	11 c0       	rjmp	.+34     	; 0xb0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	0f c0       	rjmp	.+30     	; 0xb0 <__bad_interrupt>
  92:	00 00       	nop
  94:	0d c0       	rjmp	.+26     	; 0xb0 <__bad_interrupt>
  96:	00 00       	nop
  98:	0b c0       	rjmp	.+22     	; 0xb0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	09 c0       	rjmp	.+18     	; 0xb0 <__bad_interrupt>
	...

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	02 d0       	rcall	.+4      	; 0xb2 <main>
  ae:	5c c0       	rjmp	.+184    	; 0x168 <_exit>

000000b0 <__bad_interrupt>:
  b0:	a7 cf       	rjmp	.-178    	; 0x0 <__vectors>

000000b2 <main>:


int main(void)
{
	#ifdef SLAVE
	uartsetup();
  b2:	02 d0       	rcall	.+4      	; 0xb8 <uartsetup>
	
	readRegister_usart0();
  b4:	3e d0       	rcall	.+124    	; 0x132 <readRegister_usart0>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x4>

000000b8 <uartsetup>:
  b8:	46 eb       	ldi	r20, 0xB6	; 182
    }    
    else {
        // register is nog niet geshift > even wachten
        return 1;
    }
}
  ba:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f4808>
  be:	32 e0       	ldi	r19, 0x02	; 2
  c0:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f4809>
  c4:	2e e3       	ldi	r18, 0x3E	; 62
  c6:	20 93 07 08 	sts	0x0807, r18	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f4807>
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
  d6:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__TEXT_REGION_LENGTH__+0x7f4828>
  da:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x7f4829>
  de:	20 93 27 08 	sts	0x0827, r18	; 0x800827 <__TEXT_REGION_LENGTH__+0x7f4827>
  e2:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <__TEXT_REGION_LENGTH__+0x7f4441>
  e6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f4826>
  ea:	08 95       	ret

000000ec <sendACK_usart0>:

int sendACK_usart0(){
	if(USART0_STATUS&(1<<5)){  // get de DREIF bit
  ec:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
  f0:	85 ff       	sbrs	r24, 5
  f2:	0a c0       	rjmp	.+20     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
		USART0_TXDATAH &= ~(1<<0);	// zet bit op 0
  f4:	e3 e0       	ldi	r30, 0x03	; 3
  f6:	f8 e0       	ldi	r31, 0x08	; 8
  f8:	80 81       	ld	r24, Z
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	80 83       	st	Z, r24
		USART0_TXDATAL = 0x00;
  fe:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret
	}
	else {
		return 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 10c:	08 95       	ret

0000010e <sendNACK_usart0>:

int sendNACK_usart0(){
	if(USART0_STATUS&(1<<5)){  // get de DREIF bit
 10e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
 112:	85 ff       	sbrs	r24, 5
 114:	0b c0       	rjmp	.+22     	; 0x12c <sendNACK_usart0+0x1e>
		USART0_TXDATAH |= (1<<0);	// zet bit op 1
 116:	e3 e0       	ldi	r30, 0x03	; 3
 118:	f8 e0       	ldi	r31, 0x08	; 8
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
		USART0_TXDATAL = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		return 0;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
	}
	else {
		return 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 130:	08 95       	ret

00000132 <readRegister_usart0>:
    - eerste RXDATAH inlezen en kijken of er nieuwe data aanwezig is 
    - checken of de data goed is toegekomen met PERR/FERR
    - als alles correct is -> RXDATAL inlezen en register laten schiften
*/

int readRegister_usart0(){      // geeft 8 bits terug + 1 bit als packetnummer 
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	int bits[2];
	if(USART0_RXDATAH&(1<<7)){	// kijken naar 7de bit
 136:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f4801>
 13a:	88 23       	and	r24, r24
 13c:	7c f4       	brge	.+30     	; 0x15c <readRegister_usart0+0x2a>
		bits[0] = USART0_RXDATAH;
 13e:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f4801>
		bits[1] = USART0_RXDATAL; 
 142:	c0 91 00 08 	lds	r28, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
 146:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(bits[0]&(1<<2) || bits[0]&(1<<1)){	// kijken of er geen frame of parity errors zijn
 148:	82 fd       	sbrc	r24, 2
 14a:	02 c0       	rjmp	.+4      	; 0x150 <readRegister_usart0+0x1e>
 14c:	81 ff       	sbrs	r24, 1
 14e:	04 c0       	rjmp	.+8      	; 0x158 <readRegister_usart0+0x26>
			sendNACK_usart0();			// 0xAA voorlopig als NACK
 150:	de df       	rcall	.-68     	; 0x10e <sendNACK_usart0>
			return 1;
 152:	c1 e0       	ldi	r28, 0x01	; 1
 154:	d0 e0       	ldi	r29, 0x00	; 0
		}else{//else if checken op NACK moet nog worden toegevoegd -> vraag hoe gaan we dit naar buiten brengen via de int?
			sendACK_usart0();
 156:	04 c0       	rjmp	.+8      	; 0x160 <readRegister_usart0+0x2e>
 158:	c9 df       	rcall	.-110    	; 0xec <sendACK_usart0>
			return bits[1];
 15a:	02 c0       	rjmp	.+4      	; 0x160 <readRegister_usart0+0x2e>
		}	
	}
	else{
		return 1;	// nog geen data beschikbaar
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	}
}
 160:	ce 01       	movw	r24, r28
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
